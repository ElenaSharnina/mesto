(()=>{"use strict";var e={formSelector:".modal__form",inputSelector:".modal__field",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__field_type_error",errorClass:"modal__error_visible"},t=document.querySelector(".profile__edit-button"),n=document.querySelector(".modal__field_type_name"),r=document.querySelector(".modal__field_type_occupation"),o=(document.querySelector(".profile__name"),document.querySelector(".profile__occupation"),document.querySelector(".profile__foto"),document.querySelector(".profile__add-button")),i=document.querySelector(".modal__field_type_card-name"),c=document.querySelector(".modal__field_type_card-link"),a=(document.querySelector(".modal__button_place_profile"),document.querySelector(".modal__button_type_create")),l=document.querySelector(".modal__button_place_edit-avatar"),u=document.querySelector(".profile__avatar"),s=document.querySelector(".modal__field_type_url-avatar");function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(t,n,r,o,i,c,a){var l,u,s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u=function(){s._element.remove()},(l="deleteElement")in this?Object.defineProperty(this,l,{value:u,enumerable:!0,configurable:!0,writable:!0}):this[l]=u,this._item=t,this._name=t.name,this._link=t.link,this._likes=t.likes,this._id=t._id,this._selector=n,this._openModalCard=r,this._myId=o,this._ownerId=t.owner._id,this._like=c,this._dislike=a,this._handleCardDelete=i}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._selector).content.querySelector(".element").cloneNode(!0)}},{key:"getId",value:function(){return this._id}},{key:"createCard",value:function(){return this._element=this._getTemplate(),this._ownerId!=this._myId&&this._element.querySelector(".element__delete").remove(),this._element.querySelector(".element__image").src=this._link,this._element.querySelector(".element__image").alt=this._name,this._element.querySelector(".element__name").textContent=this._name,this._setEventListeners(),this.countLikes(this._item),this._checkLikes(),this._element}},{key:"likeElement",value:function(){this._element.querySelector(".element__like").classList.add("element__like_active")}},{key:"dislikeElement",value:function(){this._element.querySelector(".element__like").classList.remove("element__like_active")}},{key:"_checkLikes",value:function(){var e=this;this._likes.forEach((function(t){t._id===e._myId&&e._element.querySelector(".element__like").classList.add("element__like_active")}))}},{key:"countLikes",value:function(e){this._element.querySelector(".element__count").textContent=e.likes.length,0===e.likes.length?this._element.querySelector(".element__count").classList.add("element__count_disactive"):this._element.querySelector(".element__count").classList.remove("element__count_disactive")}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".element__image").addEventListener("click",(function(){e._openModalCard(e._name,e._link)})),this._ownerId===this._myId&&this._element.querySelector(".element__delete").addEventListener("click",(function(){e._handleCardDelete()})),this._element.querySelector(".element__like").addEventListener("click",(function(){e._element.querySelector(".element__like").classList.contains("element__like_active")?(e.dislikeElement(),e._dislike()):(e.likeElement(),e._like())}))}}])&&f(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function(){function e(t,n){var r=this,o=t.inputSelector,i=t.submitButtonSelector,c=t.inactiveButtonClass,a=t.inputErrorClass,l=t.errorClass;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),p(this,"_hideInputError",(function(e){var t=r._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(r._inputErrorClass),t.classList.remove(r._errorClass),t.textContent=""})),p(this,"_toggleButtonState",(function(){var e=r._form.querySelector(r._submitButtonSelector);r._inputList.some((function(e){return!e.validity.valid}))?(e.setAttribute("disabled",!0),e.classList.add(r._inactiveButtonClass)):(e.removeAttribute("disabled"),e.classList.remove(r._inactiveButtonClass))})),p(this,"_checkInputValidity",(function(e){e.validity.valid?r._hideInputError(e):r._showInputError(e,e.validationMessage)})),p(this,"_setEventListeners",(function(){r._inputList.forEach((function(e){e.addEventListener("input",(function(){r._checkInputValidity(e),r._toggleButtonState()}))})),r._toggleButtonState()})),p(this,"enableValidation",(function(){r._form.addEventListener("submit",(function(e){e.preventDefault()})),r._setEventListeners()})),this._inputSelector=o,this._submitButtonSelector=i,this._inactiveButtonClass=c,this._inputErrorClass=a,this._errorClass=l,this._form=document.querySelector(n),this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector))}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e,t){var n=this._form.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),n.textContent=t,n.classList.add(this._errorClass)}}])&&_(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var m=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._initialArray=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(){var e=this;this._initialArray.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._container.append(e)}}])&&y(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var k=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),b(this,"_closeModalByESC",(function(e){"Escape"===e.key&&n.close()})),b(this,"_closeModalByOverlay",(function(e){e.target.classList.contains("modal")&&n.close()})),this._popup=document.querySelector(t),this._closeBtn=this._popup.querySelector(".modal__close-icon")}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("modal_active"),document.body.classList.add("page-js"),this.setEventListeners()}},{key:"close",value:function(){this._popup.classList.remove("modal_active"),document.body.classList.remove("page-js"),this.removeEventListener()}},{key:"setEventListeners",value:function(){var e=this;this._closeBtn.addEventListener("click",(function(){e.close()})),document.addEventListener("click",this._closeModalByOverlay),document.addEventListener("keydown",this._closeModalByESC)}},{key:"removeEventListener",value:function(){document.removeEventListener("keydown",this._closeModalByESC)}}])&&v(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(){return S="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=E(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},S.apply(this,arguments)}function E(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=L(e)););return e}function j(e,t){return j=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},j(e,t)}function O(e,t){if(t&&("object"===g(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function L(e){return L=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},L(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&j(e,t)}(c,e);var t,n,r,o,i=(r=c,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=L(r);if(o){var n=L(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return O(this,e)});function c(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(t=i.call(this,e))._popupImage=t._popup.querySelector(".modal-card__image"),t._popupLabel=t._popup.querySelector(".modal-card__label"),t}return t=c,(n=[{key:"open",value:function(e,t){S(L(c.prototype),"open",this).call(this),this._popupImage.src=t,this._popupLabel.textContent=e}}])&&w(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),c}(k);function C(e){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C(e)}function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function I(){return I="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=R(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},I.apply(this,arguments)}function R(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=x(e)););return e}function T(e,t){return T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},T(e,t)}function B(e,t){if(t&&("object"===C(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return A(e)}function A(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function x(e){return x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},x(e)}var D=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&T(e,t)}(c,e);var t,n,r,o,i=(r=c,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=x(r);if(o){var n=x(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return B(this,e)});function c(e,t){var n,r,o,a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),a=function(){n._handleFormSubmit(n._getInputValues()),n.close()},(o="_handleSubmit")in(r=A(n=i.call(this,e)))?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a,n._handleFormSubmit=t,n._form=n._popup.querySelector(".modal__form"),n._inputList=n._form.querySelectorAll(".modal__field"),n}return t=c,(n=[{key:"_getInputValues",value:function(){var e={};return this._inputList.forEach((function(t){e.name=t.value})),e}},{key:"setEventListeners",value:function(){I(x(c.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",this._handleSubmit)}},{key:"removeEventListener",value:function(){I(x(c.prototype),"removeEventListener",this).call(this),this._form.removeEventListener("submit",this._handleSubmit)}},{key:"close",value:function(){I(x(c.prototype),"close",this).call(this),this._form.reset(),this.removeEventListener()}},{key:"alertLoading",value:function(e,t){this._popup.querySelector(".modal__button_loader").textContent=e?"Сохранение...":t}}])&&q(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),c}(k);function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var N=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=document.querySelector(t),this._userInfo=document.querySelector(n),this._userAvatar=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{userName:this._userName.textContent,userInfo:this._userInfo.textContent}}},{key:"setUserInfo",value:function(e){this._userName.textContent=e.name,this._userInfo.textContent=e.about,this._userAvatar.src=e.avatar,this._id=e._id}},{key:"getId",value:function(){return this._id}}])&&U(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function M(e){return M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},M(e)}function V(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function J(){return J="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=F(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},J.apply(this,arguments)}function F(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=z(e)););return e}function G(e,t){return G=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},G(e,t)}function H(e,t){if(t&&("object"===M(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function z(e){return z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},z(e)}var K=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&G(e,t)}(c,e);var t,n,r,o,i=(r=c,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=z(r);if(o){var n=z(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return H(this,e)});function c(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(n=i.call(this,e))._form=document.querySelector(t),n}return t=c,(n=[{key:"open",value:function(e){J(z(c.prototype),"open",this).call(this),this._deleteElement=e}},{key:"setEventListeners",value:function(){var e=this;J(z(c.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._deleteElement()}))}}])&&V(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),c}(k);function Q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var W,X,Y=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.url,this._headers=t.headers}var t,n;return t=e,(n=[{key:"getUserInfoApi",value:function(){return fetch("".concat(this._url,"/users/me"),{method:"GET",headers:this._headers}).then((function(e){return console.log(e),e.ok?e.json():Promise.reject("Что-то пошло не так: ".concat(e.status))}))}},{key:"getInitialCards",value:function(){return fetch("".concat(this._url,"/cards"),{method:"GET",headers:this._headers}).then((function(e){return console.log(e),e.ok?e.json():Promise.reject("Что-то пошло не так: ".concat(e.status))}))}},{key:"setUserInfoApi",value:function(e,t){return fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((function(e){return e.ok?e.json():Promise.reject("Что-то пошло не так: ".concat(e.status))}))}},{key:"addNewCard",value:function(e,t){return fetch("".concat(this._url,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((function(e){return e.ok?e.json():Promise.reject("Что-то пошло не так: ".concat(e.status))}))}},{key:"like",value:function(e){return fetch("".concat(this._url,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Что-то пошло не так: ".concat(e.status))}))}},{key:"dislike",value:function(e){return fetch("".concat(this._url,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Что-то пошло не так: ".concat(e.status))}))}},{key:"deleteCard",value:function(e){return fetch("".concat(this._url,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Что-то пошло не так: ".concat(e.status))}))}},{key:"changeAvatar",value:function(e){return fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((function(e){return e.ok?e.json():Promise.reject("Что-то пошло не так: ".concat(e.status))}))}}])&&Q(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),Z=new K(".modal-delete",".modal__form_place_delete"),$=new D(".modalpic",(function(){var e=this,t={name:i.value,link:c.value};$.alertLoading(!0,"Создать"),oe.addNewCard(t.name,t.link).then((function(e){X.addItem(ie(e))})).catch((function(e){console.log(e)})).finally((function(){e.alertLoading(!1,"Создать")})),a.setAttribute("disabled",!0),a.classList.add("modal__button_disabled")})),ee=new P(".modal-card"),te=new D(".modal-edit",(function(){var e={username:n.value,userjob:r.value};te.alertLoading(!0,"Сохранить"),oe.setUserInfoApi(e.username,e.userjob).then((function(e){ne.setUserInfo(e)})).catch((function(e){console.log(e)})).finally((function(){te.alertLoading(!1,"Сохранить")}))})),ne=new N(".profile__name",".profile__occupation",".profile__foto"),re=new D(".modal-edid-avatar",(function(){re.alertLoading(!0,"Сохранить"),oe.changeAvatar(s.value).then((function(e){ne.setUserInfo(e)})).catch((function(e){console.log(e)})).finally((function(){re.alertLoading(!1,"Сохранить")})),l.setAttribute("disabled",!0),l.classList.add("modal__button_disabled")})),oe=new Y({url:"https://mesto.nomoreparties.co/v1/cohort36",headers:{authorization:"aae70420-34f5-44cc-8cb0-a49b7f2f456b","Content-Type":"application/json"}});function ie(e){var t=new d(e,"#element",ce,W,(function(){Z.open((function(){return oe.deleteCard(t.getId()).then((function(){t.deleteElement(),Z.close()})).catch((function(e){console.log(e)}))}))}),(function(){oe.like(t.getId()).then((function(e){t.likeElement(),t.countLikes(e)})).catch((function(e){console.log(e)}))}),(function(){oe.dislike(t.getId()).then((function(e){t.dislikeElement(),t.countLikes(e)})).catch((function(e){console.log(e)}))}));return t.createCard()}function ce(e,t){this.src=t,this.textContent=e,ee.open(e,t)}oe.getUserInfoApi().then((function(e){console.log(e),W=e._id,ne.setUserInfo(e)})).catch((function(e){console.log(e)})),oe.getInitialCards().then((function(e){console.log(e),(X=new m({items:e,renderer:function(e){var t=ie(e);X.addItem(t)}},".elements")).renderItems()})).catch((function(e){console.log(e)})),t.addEventListener("click",(function(){n.value=ne.getUserInfo().userName,r.value=ne.getUserInfo().userInfo,te.open()})),o.addEventListener("click",(function(){$.open()})),u.addEventListener("click",(function(){re.open()}));var ae=new h(e,".modal__form_place_regform"),le=new h(e,".modal__form_place_modalpic"),ue=new h(e,".modal__form_place_edit-avatar");le.enableValidation(),ae.enableValidation(),ue.enableValidation()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFBSXBJLEVBQWNoRSxFQUFXLGtDQUU5RG1NLEdBQXVCRSxtQkFDdkJILEdBQXNCRyxtQkFDdEJELEdBQXlCQyxvQiIsInNvdXJjZXMiOlsid2VicGFjazovL21lc3RvLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cERlbGV0ZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9wYWdlcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZXhwb3J0IGNvbnN0IG9iakNvbmZpZyA9IHtcclxuICBmb3JtU2VsZWN0b3I6ICcubW9kYWxfX2Zvcm0nLFxyXG4gIGlucHV0U2VsZWN0b3I6ICcubW9kYWxfX2ZpZWxkJyxcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogJy5tb2RhbF9fYnV0dG9uJyxcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiAnbW9kYWxfX2J1dHRvbl9kaXNhYmxlZCcsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiAnbW9kYWxfX2ZpZWxkX3R5cGVfZXJyb3InLFxyXG4gIGVycm9yQ2xhc3M6ICdtb2RhbF9fZXJyb3JfdmlzaWJsZSdcclxufVxyXG5leHBvcnQgY29uc3QgYXBpQ29uZmlnID0ge1xyXG4gIHVybDogJ2h0dHBzOi8vbWVzdG8ubm9tb3JlcGFydGllcy5jby92MS9jb2hvcnQzNicsXHJcbiAgaGVhZGVyczoge1xyXG4gICAgYXV0aG9yaXphdGlvbjogJ2FhZTcwNDIwLTM0ZjUtNDRjYy04Y2IwLWE0OWI3ZjJmNDU2YicsXHJcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgfVxyXG59XHJcbmV4cG9ydCBjb25zdCBidXR0b25FZGl0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2VkaXQtYnV0dG9uJyk7XHJcblxyXG5leHBvcnQgY29uc3QgbmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19maWVsZF90eXBlX25hbWUnKTtcclxuZXhwb3J0IGNvbnN0IGpvYklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19maWVsZF90eXBlX29jY3VwYXRpb24nKTtcclxuZXhwb3J0IGNvbnN0IHVzZXJuYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX25hbWUnKTtcclxuZXhwb3J0IGNvbnN0IHVzZXJqb2IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fb2NjdXBhdGlvbicpO1xyXG5leHBvcnQgY29uc3QgdXNlckF2YXJhdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19mb3RvJyk7XHJcbmV4cG9ydCBjb25zdCBhZGRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYWRkLWJ1dHRvbicpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHBpY05hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2ZpZWxkX3R5cGVfY2FyZC1uYW1lJyk7XHJcbmV4cG9ydCBjb25zdCBwaWNMaW5rID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19maWVsZF90eXBlX2NhcmQtbGluaycpO1xyXG5leHBvcnQgY29uc3QgYnRuU3VibWl0UHJvZmlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fYnV0dG9uX3BsYWNlX3Byb2ZpbGUnKTtcclxuZXhwb3J0IGNvbnN0IGJ0blN1Ym1pdEFkZENhcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2J1dHRvbl90eXBlX2NyZWF0ZScpO1xyXG5leHBvcnQgY29uc3QgYnRuU3VibWl0QXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19idXR0b25fcGxhY2VfZWRpdC1hdmF0YXInKTtcclxuZXhwb3J0IGNvbnN0IGVsZW1lbnRFZGl0QXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2F2YXRhcicpO1xyXG5leHBvcnQgY29uc3QgYXZhdGFySW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2ZpZWxkX3R5cGVfdXJsLWF2YXRhcicpO1xyXG4iLCJcclxuZXhwb3J0IGNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKGl0ZW0sIHNlbGVjdG9yLCBoYW5kbGVDYXJkQ2xpY2ssIG15SWQsIGhhbmRsZUNhcmREZWxldGUsIGxpa2UsIGRpc2xpa2UpIHtcclxuICAgIHRoaXMuX2l0ZW0gPSBpdGVtO1xyXG4gICAgdGhpcy5fbmFtZSA9IGl0ZW0ubmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBpdGVtLmxpbms7XHJcbiAgICB0aGlzLl9saWtlcyA9IGl0ZW0ubGlrZXM7XHJcbiAgICB0aGlzLl9pZCA9IGl0ZW0uX2lkO1xyXG4gICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcclxuICAgIHRoaXMuX29wZW5Nb2RhbENhcmQgPSBoYW5kbGVDYXJkQ2xpY2s7XHJcbiAgICB0aGlzLl9teUlkID0gbXlJZDtcclxuICAgIHRoaXMuX293bmVySWQgPSBpdGVtLm93bmVyLl9pZDtcclxuICAgIHRoaXMuX2xpa2UgPSBsaWtlO1xyXG4gICAgdGhpcy5fZGlzbGlrZSA9IGRpc2xpa2U7XHJcbiAgICB0aGlzLl9oYW5kbGVDYXJkRGVsZXRlID0gaGFuZGxlQ2FyZERlbGV0ZTtcclxuXHJcbiAgfVxyXG5cclxuICBfZ2V0VGVtcGxhdGUoKSB7ICAgICAgICAgICAgICAvL9Cy0L7Qt9Cy0YDQsNGJ0LDQtdC8INGA0LDQt9C80LXRgtC60YNcclxuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZG9jdW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fc2VsZWN0b3IpXHJcbiAgICAgIC5jb250ZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudCcpXHJcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcblxyXG4gICAgcmV0dXJuIGNhcmRFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgZ2V0SWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVDYXJkKCkgeyAgICAgICAgICAgICAvL9C00L7QsdCw0LLQu9GP0LXQvCDQsiDRgNCw0LfQvNC10YLQutGDINC90LDQt9Cy0LDQvdC40LUg0Lgg0LrQsNGA0YLQuNC90LrRg1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XHJcblxyXG4gICAgaWYgKHRoaXMuX293bmVySWQgIT0gdGhpcy5fbXlJZCkge1xyXG4gICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19kZWxldGUnKS5yZW1vdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19pbWFnZScpLnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19pbWFnZScpLmFsdCA9IHRoaXMuX25hbWU7XHJcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19uYW1lJykudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG5cclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLmNvdW50TGlrZXModGhpcy5faXRlbSk7XHJcbiAgICB0aGlzLl9jaGVja0xpa2VzKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBsaWtlRWxlbWVudCgpIHsgICAgICAgICAgICAvL2xpa2Ug0LrQsNGA0YLQvtGH0LrQuFxyXG4gICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudF9fbGlrZScpLmNsYXNzTGlzdC5hZGQoJ2VsZW1lbnRfX2xpa2VfYWN0aXZlJyk7XHJcbiAgfVxyXG4gIGRpc2xpa2VFbGVtZW50KCkge1xyXG4gICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudF9fbGlrZScpLmNsYXNzTGlzdC5yZW1vdmUoJ2VsZW1lbnRfX2xpa2VfYWN0aXZlJyk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVFbGVtZW50ID0gKCkgPT4geyAgICAgICAgLy/Rg9C00LDQu9C10L3QuNC1INC60LDRgNGC0L7Rh9C60LhcclxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAvL3RoaXMuX2VsZW1lbnQgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgX2NoZWNrTGlrZXMoKSB7XHJcbiAgICB0aGlzLl9saWtlcy5mb3JFYWNoKGxpa2UgPT4ge1xyXG4gICAgICBpZiAobGlrZS5faWQgPT09IHRoaXMuX215SWQpIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19saWtlJykuY2xhc3NMaXN0LmFkZCgnZWxlbWVudF9fbGlrZV9hY3RpdmUnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGNvdW50TGlrZXMoZGF0YSkge1xyXG4gICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudF9fY291bnQnKS50ZXh0Q29udGVudCA9IGRhdGEubGlrZXMubGVuZ3RoO1xyXG4gICAgaWYgKGRhdGEubGlrZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRfX2NvdW50JykuY2xhc3NMaXN0LmFkZCgnZWxlbWVudF9fY291bnRfZGlzYWN0aXZlJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19jb3VudCcpLmNsYXNzTGlzdC5yZW1vdmUoJ2VsZW1lbnRfX2NvdW50X2Rpc2FjdGl2ZScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkgeyAvL9C00L7QsdCw0LLQu9GP0LXQvCDRgdC70YPRiNCw0YLQtdC70Lgg0L3QsCDQu9Cw0LnQuiDQuCDRg9C00LDQu9C10L3QuNC1INC60LDRgNGC0L7Rh9C60LhcclxuXHJcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19pbWFnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4geyAvLyDRgdC70YPRiNCw0YLQtdC70Ywg0L3QsCDQvtGC0LrRgNGL0YLQuNC1INC60LDRgNGC0L7Rh9C60Lgg0LIg0LzQvtC00LDQu9GM0L3QvtC8INC+0LrQvdC1XHJcbiAgICAgIHRoaXMuX29wZW5Nb2RhbENhcmQodGhpcy5fbmFtZSwgdGhpcy5fbGluaylcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICBpZiAodGhpcy5fb3duZXJJZCA9PT0gdGhpcy5fbXlJZCkge1xyXG4gICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19kZWxldGUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICB0aGlzLl9oYW5kbGVDYXJkRGVsZXRlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudF9fbGlrZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudF9fbGlrZScpLmNsYXNzTGlzdC5jb250YWlucygnZWxlbWVudF9fbGlrZV9hY3RpdmUnKSkge1xyXG4gICAgICAgIHRoaXMuZGlzbGlrZUVsZW1lbnQoKTtcclxuICAgICAgICB0aGlzLl9kaXNsaWtlKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5saWtlRWxlbWVudCgpO1xyXG4gICAgICAgIHRoaXMuX2xpa2UoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcblxyXG59IiwiZXhwb3J0IGNsYXNzIEZvcm1WYWxpZGF0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKHsgaW5wdXRTZWxlY3Rvciwgc3VibWl0QnV0dG9uU2VsZWN0b3IsIGluYWN0aXZlQnV0dG9uQ2xhc3MsIGlucHV0RXJyb3JDbGFzcywgZXJyb3JDbGFzcyB9LCBmb3JtKSB7XHJcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gaW5wdXRTZWxlY3RvcjtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yID0gc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IGlucHV0RXJyb3JDbGFzcztcclxuICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSBlcnJvckNsYXNzO1xyXG4gICAgdGhpcy5fZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZm9ybSk7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QgPSBBcnJheS5mcm9tKHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9pbnB1dFNlbGVjdG9yKSk7XHJcbiAgfVxyXG5cclxuICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBlcnJvck1lc3NhZ2UpIHtcclxuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihgLiR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmApO1xyXG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGVycm9yTWVzc2FnZTtcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gIH07XHJcblxyXG5cclxuICBfaGlkZUlucHV0RXJyb3IgPSAoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoYC4ke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9ICcnO1xyXG4gIH07XHJcblxyXG4gIF90b2dnbGVCdXR0b25TdGF0ZSA9ICgpID0+IHtcclxuICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xyXG4gICAgY29uc3QgaGFzSW52YWxpZElucHV0ID0gdGhpcy5faW5wdXRMaXN0LnNvbWUoaW5wdXRFbGVtZW50ID0+ICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpO1xyXG4gICAgaWYgKGhhc0ludmFsaWRJbnB1dCkge1xyXG4gICAgICBidXR0b25FbGVtZW50LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYnV0dG9uRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBfY2hlY2tJbnB1dFZhbGlkaXR5ID0gKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2UpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMgPSAoKSA9PiB7XHJcblxyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgfTtcclxuXHJcbiAgZW5hYmxlVmFsaWRhdGlvbiA9ICgpID0+IHtcclxuICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9O1xyXG5cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX2luaXRpYWxBcnJheSA9IGl0ZW1zO1xyXG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySXRlbXMoKSB7XHJcbiAgICB0aGlzLl9pbml0aWFsQXJyYXkuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBhZGRJdGVtKGNhcmRFbGVtZW50KSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kKGNhcmRFbGVtZW50KTtcclxuICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX3BvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2Nsb3NlQnRuID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLm1vZGFsX19jbG9zZS1pY29uJyk7XHJcbiAgfVxyXG5cclxuICBvcGVuKCkgeyAvL9C+0YLQutGA0YvRgtC40LUg0LzQvtC00LDQu9GM0L3QvtCz0L4g0L7QutC90LBcclxuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5hZGQoJ21vZGFsX2FjdGl2ZScpO1xyXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdwYWdlLWpzJyk7XHJcblxyXG4gICAgdGhpcy5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7IC8v0LfQsNC60YDRi9GC0LjQtSDQvNC+0LTQsNC70YzQvdC+0LPQviDQvtC60L3QsFxyXG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LnJlbW92ZSgnbW9kYWxfYWN0aXZlJyk7XHJcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ3BhZ2UtanMnKTtcclxuXHJcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoKTtcclxuICB9XHJcblxyXG4gIF9jbG9zZU1vZGFsQnlFU0MgPSAoZXZ0KSA9PiB7IC8vINC30LDQutGA0YvRgtC40LUg0L/QviBFU0NcclxuICAgIGlmIChldnQua2V5ID09PSAnRXNjYXBlJykge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIF9jbG9zZU1vZGFsQnlPdmVybGF5ID0gKGV2dCkgPT4geyAvLyDQt9Cw0LrRgNGL0YLQuNC1INC/0L4g0LrQu9C40LrRgyDQv9C+INC+0LLQtdGA0LvQtdGOXHJcbiAgICBpZiAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsJykpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2Nsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9KVxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9jbG9zZU1vZGFsQnlPdmVybGF5KTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9jbG9zZU1vZGFsQnlFU0MpO1xyXG4gIH1cclxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2Nsb3NlTW9kYWxCeUVTQyk7XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgUG9wdXAgfSBmcm9tICcuLi9jb21wb25lbnRzL1BvcHVwLmpzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcclxuXHRjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcblx0XHRzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuXHRcdHRoaXMuX3BvcHVwSW1hZ2UgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtY2FyZF9faW1hZ2UnKTtcclxuXHRcdHRoaXMuX3BvcHVwTGFiZWwgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtY2FyZF9fbGFiZWwnKTtcclxuXHR9XHJcblx0b3BlbihuYW1lLCBsaW5rKSB7XHJcblx0XHRzdXBlci5vcGVuKCk7XHJcblx0XHR0aGlzLl9wb3B1cEltYWdlLnNyYyA9IGxpbms7XHJcblx0XHR0aGlzLl9wb3B1cExhYmVsLnRleHRDb250ZW50ID0gbmFtZTtcclxuXHR9XHJcbn0iLCJpbXBvcnQgeyBQb3B1cCB9IGZyb20gJy4vUG9wdXAuanMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlRm9ybVN1Ym1pdCkge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgIHRoaXMuX2Zvcm0gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Zvcm0nKTtcclxuICAgIHRoaXMuX2lucHV0TGlzdCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvckFsbCgnLm1vZGFsX19maWVsZCcpO1xyXG4gIH1cclxuXHJcbiAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgY29uc3QgdmFsdWVzT2JqID0ge307XHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgdmFsdWVzT2JqLm5hbWUgPSBpbnB1dC52YWx1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdmFsdWVzT2JqO1xyXG5cclxuICB9XHJcbiAgX2hhbmRsZVN1Ym1pdCA9ICgpID0+IHsgLy8g0YPRgdGC0YDQsNC90Y/QtdC8INCx0LDQsyDRgSDQv9GD0YHRgtGL0LzQuCDRgdCw0LHQvNC40YLQsNC80LgsINGD0LTQsNC70Y/RjyDQstGB0LUg0YHQu9GD0YjQsNGC0LXQu9C4INC90LAg0LfQsNC60YDRi9GC0LjQuFxyXG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICAgIHRoaXMuY2xvc2UoKTtcclxuICB9XHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLl9oYW5kbGVTdWJtaXQpO1xyXG4gIH1cclxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge1xyXG4gICAgc3VwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigpO1xyXG4gICAgdGhpcy5fZm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLl9oYW5kbGVTdWJtaXQpO1xyXG4gIH1cclxuICBjbG9zZSgpIHtcclxuICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICB0aGlzLl9mb3JtLnJlc2V0KCk7XHJcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoKTtcclxuICB9XHJcbiAgYWxlcnRMb2FkaW5nKGlzTG9hZGluZywgbWVzc2FnZSkgeyAvLyDRg9Cy0LXQtNC10LzQu9C10L3QuNC1INC+INC/0YDQvtGG0LXRgdGB0LUg0LfQsNCz0YDRg9C30LrQuFxyXG4gICAgY29uc3Qgc3VibWl0QnRuID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLm1vZGFsX19idXR0b25fbG9hZGVyJyk7XHJcbiAgICBpZiAoaXNMb2FkaW5nKSB7XHJcbiAgICAgIHN1Ym1pdEJ0bi50ZXh0Q29udGVudCA9IGDQodC+0YXRgNCw0L3QtdC90LjQtS4uLmA7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc3VibWl0QnRuLnRleHRDb250ZW50ID0gbWVzc2FnZTtcclxuICAgIH1cclxuICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgVXNlckluZm8ge1xyXG4gIGNvbnN0cnVjdG9yKHVzZXJOYW1lU2VsZWN0b3IsIHVzZXJJbmZvU2VsZWN0b3IsIHVzZXJBdmF0YXJTZWxlY3RvcikgeyAgLy8g0LIg0LHRgNC40YTQtSDRgdC10LvQtdC60YLQvtGA0YshXHJcbiAgICB0aGlzLl91c2VyTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodXNlck5hbWVTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl91c2VySW5mbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodXNlckluZm9TZWxlY3Rvcik7XHJcbiAgICB0aGlzLl91c2VyQXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih1c2VyQXZhdGFyU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICBjb25zdCB1c2VyVmFsdWVzID0ge1xyXG4gICAgICB1c2VyTmFtZTogdGhpcy5fdXNlck5hbWUudGV4dENvbnRlbnQsXHJcbiAgICAgIHVzZXJJbmZvOiB0aGlzLl91c2VySW5mby50ZXh0Q29udGVudFxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVzZXJWYWx1ZXM7XHJcbiAgfVxyXG5cclxuICBzZXRVc2VySW5mbyhkYXRhKSB7XHJcbiAgICB0aGlzLl91c2VyTmFtZS50ZXh0Q29udGVudCA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMuX3VzZXJJbmZvLnRleHRDb250ZW50ID0gZGF0YS5hYm91dDtcclxuICAgIHRoaXMuX3VzZXJBdmF0YXIuc3JjID0gZGF0YS5hdmF0YXI7XHJcbiAgICB0aGlzLl9pZCA9IGRhdGEuX2lkO1xyXG4gIH1cclxuXHJcbiAgZ2V0SWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgfVxyXG5cclxufSIsImltcG9ydCB7IFBvcHVwIH0gZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuZXhwb3J0IGNsYXNzIFBvcHVwRGVsZXRlIGV4dGVuZHMgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgZm9ybVNlbGVjdG9yKSB7XHJcbiAgICAgICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5fZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZm9ybVNlbGVjdG9yKTtcclxuICAgIH1cclxuICAgIG9wZW4oZGVsZXRlRWxlbWVudCkge1xyXG4gICAgICAgIHN1cGVyLm9wZW4oKTtcclxuICAgICAgICB0aGlzLl9kZWxldGVFbGVtZW50ID0gZGVsZXRlRWxlbWVudDtcclxuICAgIH1cclxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZ0KSA9PiB7XHJcbiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9kZWxldGVFbGVtZW50KCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbn0iLCJleHBvcnQgY2xhc3MgQXBpIHtcclxuICBjb25zdHJ1Y3RvcihhcGlDb25maWcpIHtcclxuICAgIHRoaXMuX3VybCA9IGFwaUNvbmZpZy51cmw7XHJcbiAgICB0aGlzLl9oZWFkZXJzID0gYXBpQ29uZmlnLmhlYWRlcnM7XHJcbiAgfVxyXG4gIGdldFVzZXJJbmZvQXBpKCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xyXG4gICAgfSlcclxuICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCn0YLQvi3RgtC+INC/0L7RiNC70L4g0L3QtSDRgtCw0Lo6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgICAgfSlcclxuICB9XHJcbiAgZ2V0SW5pdGlhbENhcmRzKCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xyXG4gICAgfSlcclxuICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCn0YLQvi3RgtC+INC/0L7RiNC70L4g0L3QtSDRgtCw0Lo6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgICAgfSlcclxuICB9XHJcbiAgc2V0VXNlckluZm9BcGkodXNlcm5hbWUsIHVzZXJqb2IpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L3VzZXJzL21lYCwge1xyXG4gICAgICBtZXRob2Q6ICdQQVRDSCcsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcblxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogdXNlcm5hbWUsXHJcbiAgICAgICAgYWJvdXQ6IHVzZXJqb2JcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChg0KfRgtC+LdGC0L4g0L/QvtGI0LvQviDQvdC1INGC0LDQujogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgICB9KVxyXG4gIH1cclxuICBhZGROZXdDYXJkKG5hbWUsIGxpbmspIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L2NhcmRzYCwge1xyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgIGxpbms6IGxpbmtcclxuICAgICAgfSlcclxuXHJcbiAgICB9KVxyXG4gICAgICAudGhlbihyZXMgPT4ge1xyXG4gICAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCn0YLQvi3RgtC+INC/0L7RiNC70L4g0L3QtSDRgtCw0Lo6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgICAgfSlcclxuICB9XHJcbiAgbGlrZShpZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHMvbGlrZXMvJHtpZH1gLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BVVCcsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KVxyXG4gICAgICAudGhlbihyZXMgPT4ge1xyXG4gICAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCn0YLQvi3RgtC+INC/0L7RiNC70L4g0L3QtSDRgtCw0Lo6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgICAgfSlcclxuICB9XHJcbiAgZGlzbGlrZShpZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHMvbGlrZXMvJHtpZH1gLCB7XHJcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KVxyXG4gICAgICAudGhlbihyZXMgPT4ge1xyXG4gICAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCn0YLQvi3RgtC+INC/0L7RiNC70L4g0L3QtSDRgtCw0Lo6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgICAgfSlcclxuICB9XHJcblxyXG4gIGRlbGV0ZUNhcmQoaWQpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L2NhcmRzLyR7aWR9YCwge1xyXG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG5cclxuICAgIH0pXHJcbiAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChg0KfRgtC+LdGC0L4g0L/QvtGI0LvQviDQvdC1INGC0LDQujogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgICB9KVxyXG4gIH1cclxuICBjaGFuZ2VBdmF0YXIoYXZhdGFyKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS91c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BBVENIJyxcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBhdmF0YXI6IGF2YXRhclxyXG4gICAgICB9KVxyXG4gICAgfSlcclxuICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGDQp9GC0L4t0YLQviDQv9C+0YjQu9C+INC90LUg0YLQsNC6OiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgICAgIH0pXHJcbiAgfVxyXG59IiwiaW1wb3J0IHtcclxuICBvYmpDb25maWcsXHJcbiAgYnV0dG9uRWRpdCxcclxuICBuYW1lSW5wdXQsXHJcbiAgam9iSW5wdXQsXHJcbiAgYXZhdGFySW5wdXQsXHJcbiAgYWRkQnV0dG9uLFxyXG4gIHBpY05hbWUsXHJcbiAgcGljTGluayxcclxuICBidG5TdWJtaXRBZGRDYXJkLFxyXG4gIGJ0blN1Ym1pdEF2YXRhcixcclxuICBlbGVtZW50RWRpdEF2YXRhcixcclxuICBhcGlDb25maWdcclxufSBmcm9tICcuLi91dGlscy9jb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBDYXJkIH0gZnJvbSAnLi4vY29tcG9uZW50cy9DYXJkLmpzJztcclxuaW1wb3J0IHsgRm9ybVZhbGlkYXRvciB9IGZyb20gJy4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyc7XHJcbmltcG9ydCB7IFNlY3Rpb24gfSBmcm9tICcuLi9jb21wb25lbnRzL1NlY3Rpb24uanMnO1xyXG5pbXBvcnQgeyBQb3B1cFdpdGhJbWFnZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMnO1xyXG5pbXBvcnQgeyBQb3B1cFdpdGhGb3JtIH0gZnJvbSAnLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzJztcclxuaW1wb3J0IHsgVXNlckluZm8gfSBmcm9tICcuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzJztcclxuaW1wb3J0IHsgUG9wdXBEZWxldGUgfSBmcm9tICcuLi9jb21wb25lbnRzL1BvcHVwRGVsZXRlLmpzJztcclxuaW1wb3J0IHsgQXBpIH0gZnJvbSAnLi4vY29tcG9uZW50cy9BcGkuanMnXHJcbmltcG9ydCAnLi9pbmRleC5jc3MnO1xyXG5sZXQgbXlJZDtcclxubGV0IGNhcmRMaXN0O1xyXG5cclxuY29uc3QgcG9wdXBEZWxldGVDYXJkID0gbmV3IFBvcHVwRGVsZXRlKCcubW9kYWwtZGVsZXRlJywgJy5tb2RhbF9fZm9ybV9wbGFjZV9kZWxldGUnKTtcclxuY29uc3QgcG9wdXBBZGRQaG90byA9IG5ldyBQb3B1cFdpdGhGb3JtKCcubW9kYWxwaWMnLCBzdWJtaXRGb3JtTmV3Q2FyZCk7XHJcbmNvbnN0IHBvcHVwV2l0aEltYWdlID0gbmV3IFBvcHVwV2l0aEltYWdlKCcubW9kYWwtY2FyZCcpO1xyXG5jb25zdCBwb3B1cEVkaXRQcm9maWxlID0gbmV3IFBvcHVwV2l0aEZvcm0oJy5tb2RhbC1lZGl0Jywgc3VibWl0UHJvZmlsZUZvcm0pO1xyXG5jb25zdCBpbnB1dFZhbHVlcyA9IG5ldyBVc2VySW5mbygnLnByb2ZpbGVfX25hbWUnLCAnLnByb2ZpbGVfX29jY3VwYXRpb24nLCAnLnByb2ZpbGVfX2ZvdG8nKTtcclxuY29uc3QgcG9wdXBFZGl0QXZhdGFyID0gbmV3IFBvcHVwV2l0aEZvcm0oJy5tb2RhbC1lZGlkLWF2YXRhcicsIHN1Ym1pdEZvcm1BdmF0YXIpO1xyXG5jb25zdCBhcGkgPSBuZXcgQXBpKGFwaUNvbmZpZyk7XHJcblxyXG5hcGkuZ2V0VXNlckluZm9BcGkoKSAvLyDQv9C+0LvRg9GH0LXQvdC40LUg0LTQsNC90L3Ri9GFINC+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtSDRgSDRgdC10YDQstC10YDQsFxyXG4gIC50aGVuKHJlcyA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgbXlJZCA9IHJlcy5faWQ7XHJcbiAgICBpbnB1dFZhbHVlcy5zZXRVc2VySW5mbyhyZXMpO1xyXG4gIH0pXHJcbiAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gIH0pO1xyXG5cclxuYXBpLmdldEluaXRpYWxDYXJkcygpICAvL9C/0L7Qu9GD0YfQtdC90LjQtSDQutCw0YDRgtC+0YfQtdC6INGBINGB0LXRgNCy0LXRgNCwXHJcbiAgLnRoZW4ocmVzID0+IHtcclxuICAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICBjYXJkTGlzdCA9IG5ldyBTZWN0aW9uKHtcclxuICAgICAgaXRlbXM6IHJlcyxcclxuICAgICAgcmVuZGVyZXI6IGNhcmRJdGVtID0+IHtcclxuICAgICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGNyZWF0ZUNhcmQoY2FyZEl0ZW0pO1xyXG4gICAgICAgIGNhcmRMaXN0LmFkZEl0ZW0oY2FyZEVsZW1lbnQpO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgICAgJy5lbGVtZW50cydcclxuICAgICk7XHJcbiAgICBjYXJkTGlzdC5yZW5kZXJJdGVtcygpO1xyXG4gIH0pXHJcbiAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gIH0pO1xyXG5cclxuLy8g0YTRg9C90LrRhtC40Y8g0YHQvtC30LTQsNC90LjRjyDQutCw0YDRgtC+0YfQutC4XHJcbmZ1bmN0aW9uIGNyZWF0ZUNhcmQoY2FyZEl0ZW0pIHtcclxuICBjb25zdCBjYXJkID0gbmV3IENhcmQoY2FyZEl0ZW0sICcjZWxlbWVudCcsIG9wZW5Nb2RhbENhcmQsIG15SWQsICgpID0+IHtcclxuICAgIHBvcHVwRGVsZXRlQ2FyZC5vcGVuKCgpID0+XHJcbiAgICAgIGFwaS5kZWxldGVDYXJkKGNhcmQuZ2V0SWQoKSkgLy/Rg9C00LDQu9C10L3QuNC1INGB0LLQvtC10Lkg0LrQsNGA0YLQvtGH0LrQuFxyXG4gICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgIGNhcmQuZGVsZXRlRWxlbWVudCgpO1xyXG4gICAgICAgICAgcG9wdXBEZWxldGVDYXJkLmNsb3NlKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICB9KSk7XHJcbiAgfSwgKCkgPT4ge1xyXG4gICAgYXBpLmxpa2UoY2FyZC5nZXRJZCgpKSAvL2xpa2VcclxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgIGNhcmQubGlrZUVsZW1lbnQoKTtcclxuICAgICAgICBjYXJkLmNvdW50TGlrZXMocmVzKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICB9KVxyXG4gIH0sICgpID0+IHtcclxuICAgIGFwaS5kaXNsaWtlKGNhcmQuZ2V0SWQoKSkgLy/RgdC90Y/RgtC40LUg0LvQsNC50LphXHJcbiAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICBjYXJkLmRpc2xpa2VFbGVtZW50KCk7XHJcbiAgICAgICAgY2FyZC5jb3VudExpa2VzKHJlcyk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgfSlcclxuICB9KVxyXG4gIGNvbnN0IGNhcmRFbGVtZW50ID0gY2FyZC5jcmVhdGVDYXJkKCk7XHJcbiAgcmV0dXJuIGNhcmRFbGVtZW50O1xyXG59O1xyXG5cclxuXHJcbmZ1bmN0aW9uIHN1Ym1pdEZvcm1OZXdDYXJkKCkgeyAvLyDQtNC+0LHQsNCy0LvQtdC90LjQtSDQvdC+0LLQvtC5INC60LDRgNGC0L7Rh9C60LhcclxuICBjb25zdCBwaWNFbGVtZW50ID0ge1xyXG4gICAgbmFtZTogcGljTmFtZS52YWx1ZSxcclxuICAgIGxpbms6IHBpY0xpbmsudmFsdWVcclxuICB9XHJcbiAgcG9wdXBBZGRQaG90by5hbGVydExvYWRpbmcodHJ1ZSwgJ9Ch0L7Qt9C00LDRgtGMJyk7XHJcbiAgYXBpLmFkZE5ld0NhcmQocGljRWxlbWVudC5uYW1lLCBwaWNFbGVtZW50LmxpbmspXHJcbiAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgY2FyZExpc3QuYWRkSXRlbShjcmVhdGVDYXJkKGRhdGEpKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgfSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgdGhpcy5hbGVydExvYWRpbmcoZmFsc2UsICfQodC+0LfQtNCw0YLRjCcpO1xyXG4gICAgfSlcclxuICBidG5TdWJtaXRBZGRDYXJkLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTsgLy8g0LrQvdC+0L/QutCwINC90LXQsNC60YLQuNCy0L3QsCDQv9GA0Lgg0L7RgtC60YDRi9GC0LjQuCDQuCDQv9GD0YHRgtGL0YUg0L/QvtC70Y/RhVxyXG4gIGJ0blN1Ym1pdEFkZENhcmQuY2xhc3NMaXN0LmFkZCgnbW9kYWxfX2J1dHRvbl9kaXNhYmxlZCcpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvcGVuTW9kYWxDYXJkKG5hbWUsIGxpbmspIHsgICAgLy/QvtGC0LrRgNGL0YLQuNC1INC60LDRgNGC0L7Rh9C60Lgg0LIg0LzQvtC00LDQu9GM0L3QvtC8INC+0LrQvdC1XHJcbiAgdGhpcy5zcmMgPSBsaW5rO1xyXG4gIHRoaXMudGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gIHBvcHVwV2l0aEltYWdlLm9wZW4obmFtZSwgbGluayk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN1Ym1pdFByb2ZpbGVGb3JtKCkgeyAvL9GA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40LUg0LTQsNC90L3Ri9GFINC/0YDQvtGE0LjQu9GPXHJcbiAgY29uc3QgaW5mbyA9IHtcclxuICAgIHVzZXJuYW1lOiBuYW1lSW5wdXQudmFsdWUsXHJcbiAgICB1c2Vyam9iOiBqb2JJbnB1dC52YWx1ZVxyXG4gIH1cclxuICBwb3B1cEVkaXRQcm9maWxlLmFsZXJ0TG9hZGluZyh0cnVlLCAn0KHQvtGF0YDQsNC90LjRgtGMJyk7XHJcbiAgYXBpLnNldFVzZXJJbmZvQXBpKGluZm8udXNlcm5hbWUsIGluZm8udXNlcmpvYilcclxuICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICBpbnB1dFZhbHVlcy5zZXRVc2VySW5mbyhkYXRhKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgfSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgcG9wdXBFZGl0UHJvZmlsZS5hbGVydExvYWRpbmcoZmFsc2UsICfQodC+0YXRgNCw0L3QuNGC0YwnKTtcclxuICAgIH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN1Ym1pdEZvcm1BdmF0YXIoKSB7IC8v0YDQtdC00LDQutGC0LjRgNC+0LLQvdC40LUg0LDQstCw0YLQsNGA0LBcclxuICBwb3B1cEVkaXRBdmF0YXIuYWxlcnRMb2FkaW5nKHRydWUsICfQodC+0YXRgNCw0L3QuNGC0YwnKTtcclxuICBhcGkuY2hhbmdlQXZhdGFyKGF2YXRhcklucHV0LnZhbHVlKVxyXG4gICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgaW5wdXRWYWx1ZXMuc2V0VXNlckluZm8ocmVzKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgfSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgcG9wdXBFZGl0QXZhdGFyLmFsZXJ0TG9hZGluZyhmYWxzZSwgJ9Ch0L7RhdGA0LDQvdC40YLRjCcpO1xyXG4gICAgfSlcclxuICBidG5TdWJtaXRBdmF0YXIuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpOyAvLyDQutC90L7Qv9C60LAg0L3QtdCw0LrRgtC40LLQvdCwINC/0YDQuCDQvtGC0LrRgNGL0YLQuNC4INC4INC/0YPRgdGC0YvRhSDQv9C+0LvRj9GFXHJcbiAgYnRuU3VibWl0QXZhdGFyLmNsYXNzTGlzdC5hZGQoJ21vZGFsX19idXR0b25fZGlzYWJsZWQnKTtcclxufVxyXG5cclxuLy9wb3B1cERlbGV0ZUNhcmQuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuLy9wb3B1cFdpdGhJbWFnZS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuYnV0dG9uRWRpdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsgLy/QvtGC0LrRgNGL0YLQuNC1INC80L7QtNCw0LvRjNC90L7Qs9C+INC+0LrQvdCwINGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8g0LTQsNC90L3Ri9GFINC/0YDQvtGE0LjQu9GPXHJcbiAgbmFtZUlucHV0LnZhbHVlID0gaW5wdXRWYWx1ZXMuZ2V0VXNlckluZm8oKS51c2VyTmFtZTtcclxuICBqb2JJbnB1dC52YWx1ZSA9IGlucHV0VmFsdWVzLmdldFVzZXJJbmZvKCkudXNlckluZm87XHJcbiAgcG9wdXBFZGl0UHJvZmlsZS5vcGVuKCk7XHJcbn0pO1xyXG5cclxuYWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4geyAvL9C+0YLQutGA0YvRgtC40LUg0LzQvtC00LDQu9GM0L3QvtCz0L4g0L7QutC90LAg0LTQvtCx0LDQstC70LXQvdC40Y8g0L3QvtCy0L7QuSDQutCw0YDRgtC+0YfQutC4XHJcbiAgcG9wdXBBZGRQaG90by5vcGVuKCk7XHJcbn0pO1xyXG5cclxuZWxlbWVudEVkaXRBdmF0YXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7IC8v0L7RgtC60YDRi9GC0LjQtSDQvNC+0LTQsNC70YzQvdC+0LPQviDQvtC60L3QsCDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNGPINCw0LLQsNGC0LDRgNCwXHJcbiAgcG9wdXBFZGl0QXZhdGFyLm9wZW4oKTtcclxufSk7XHJcblxyXG4vLyDQstC60LvRjtGH0LDQtdC8INCy0LDQu9C40LTQsNGG0LjRjiDQutCw0LbQtNC+0Lkg0YTQvtGA0LzQtVxyXG5cclxuY29uc3QgcHJvZmlsZUZvcm1WYWxpZGF0aW9uID0gbmV3IEZvcm1WYWxpZGF0b3Iob2JqQ29uZmlnLCAnLm1vZGFsX19mb3JtX3BsYWNlX3JlZ2Zvcm0nKTtcclxuY29uc3QgYWRkSW1hZ2VGb3JtVmFsaWRhdGlvbiA9IG5ldyBGb3JtVmFsaWRhdG9yKG9iakNvbmZpZywgJy5tb2RhbF9fZm9ybV9wbGFjZV9tb2RhbHBpYycpO1xyXG5jb25zdCBlZGl0QXZhdGFyRm9yblZhbGlkYXRpb24gPSBuZXcgRm9ybVZhbGlkYXRvcihvYmpDb25maWcsICcubW9kYWxfX2Zvcm1fcGxhY2VfZWRpdC1hdmF0YXInKTtcclxuXHJcbmFkZEltYWdlRm9ybVZhbGlkYXRpb24uZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5wcm9maWxlRm9ybVZhbGlkYXRpb24uZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5lZGl0QXZhdGFyRm9yblZhbGlkYXRpb24uZW5hYmxlVmFsaWRhdGlvbigpOyJdLCJuYW1lcyI6WyJvYmpDb25maWciLCJmb3JtU2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsImJ1dHRvbkVkaXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJuYW1lSW5wdXQiLCJqb2JJbnB1dCIsImFkZEJ1dHRvbiIsInBpY05hbWUiLCJwaWNMaW5rIiwiYnRuU3VibWl0QWRkQ2FyZCIsImJ0blN1Ym1pdEF2YXRhciIsImVsZW1lbnRFZGl0QXZhdGFyIiwiYXZhdGFySW5wdXQiLCJDYXJkIiwiaXRlbSIsInNlbGVjdG9yIiwiaGFuZGxlQ2FyZENsaWNrIiwibXlJZCIsImhhbmRsZUNhcmREZWxldGUiLCJsaWtlIiwiZGlzbGlrZSIsIl9lbGVtZW50IiwicmVtb3ZlIiwidGhpcyIsIl9pdGVtIiwiX25hbWUiLCJuYW1lIiwiX2xpbmsiLCJsaW5rIiwiX2xpa2VzIiwibGlrZXMiLCJfaWQiLCJfc2VsZWN0b3IiLCJfb3Blbk1vZGFsQ2FyZCIsIl9teUlkIiwiX293bmVySWQiLCJvd25lciIsIl9saWtlIiwiX2Rpc2xpa2UiLCJfaGFuZGxlQ2FyZERlbGV0ZSIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJfZ2V0VGVtcGxhdGUiLCJzcmMiLCJhbHQiLCJ0ZXh0Q29udGVudCIsIl9zZXRFdmVudExpc3RlbmVycyIsImNvdW50TGlrZXMiLCJfY2hlY2tMaWtlcyIsImNsYXNzTGlzdCIsImFkZCIsImZvckVhY2giLCJkYXRhIiwibGVuZ3RoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNvbnRhaW5zIiwiZGlzbGlrZUVsZW1lbnQiLCJsaWtlRWxlbWVudCIsIkZvcm1WYWxpZGF0b3IiLCJmb3JtIiwiaW5wdXRFbGVtZW50IiwiZXJyb3JFbGVtZW50IiwiX2Zvcm0iLCJpZCIsIl9pbnB1dEVycm9yQ2xhc3MiLCJfZXJyb3JDbGFzcyIsImJ1dHRvbkVsZW1lbnQiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5wdXRMaXN0Iiwic29tZSIsInZhbGlkaXR5IiwidmFsaWQiLCJzZXRBdHRyaWJ1dGUiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsInJlbW92ZUF0dHJpYnV0ZSIsIl9oaWRlSW5wdXRFcnJvciIsIl9zaG93SW5wdXRFcnJvciIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsIl90b2dnbGVCdXR0b25TdGF0ZSIsImV2dCIsInByZXZlbnREZWZhdWx0IiwiX2lucHV0U2VsZWN0b3IiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZXJyb3JNZXNzYWdlIiwiU2VjdGlvbiIsImNvbnRhaW5lclNlbGVjdG9yIiwiaXRlbXMiLCJyZW5kZXJlciIsIl9pbml0aWFsQXJyYXkiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiY2FyZEVsZW1lbnQiLCJhcHBlbmQiLCJQb3B1cCIsInBvcHVwU2VsZWN0b3IiLCJrZXkiLCJjbG9zZSIsInRhcmdldCIsIl9wb3B1cCIsIl9jbG9zZUJ0biIsImJvZHkiLCJzZXRFdmVudExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfY2xvc2VNb2RhbEJ5T3ZlcmxheSIsIl9jbG9zZU1vZGFsQnlFU0MiLCJQb3B1cFdpdGhJbWFnZSIsIl9wb3B1cEltYWdlIiwiX3BvcHVwTGFiZWwiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX2dldElucHV0VmFsdWVzIiwidmFsdWVzT2JqIiwiaW5wdXQiLCJ2YWx1ZSIsIl9oYW5kbGVTdWJtaXQiLCJyZXNldCIsImlzTG9hZGluZyIsIm1lc3NhZ2UiLCJVc2VySW5mbyIsInVzZXJOYW1lU2VsZWN0b3IiLCJ1c2VySW5mb1NlbGVjdG9yIiwidXNlckF2YXRhclNlbGVjdG9yIiwiX3VzZXJOYW1lIiwiX3VzZXJJbmZvIiwiX3VzZXJBdmF0YXIiLCJ1c2VyTmFtZSIsInVzZXJJbmZvIiwiYWJvdXQiLCJhdmF0YXIiLCJQb3B1cERlbGV0ZSIsImRlbGV0ZUVsZW1lbnQiLCJfZGVsZXRlRWxlbWVudCIsImNhcmRMaXN0IiwiQXBpIiwiYXBpQ29uZmlnIiwiX3VybCIsInVybCIsIl9oZWFkZXJzIiwiaGVhZGVycyIsImZldGNoIiwibWV0aG9kIiwidGhlbiIsInJlcyIsImNvbnNvbGUiLCJsb2ciLCJvayIsImpzb24iLCJQcm9taXNlIiwicmVqZWN0Iiwic3RhdHVzIiwidXNlcm5hbWUiLCJ1c2Vyam9iIiwiSlNPTiIsInN0cmluZ2lmeSIsInBvcHVwRGVsZXRlQ2FyZCIsInBvcHVwQWRkUGhvdG8iLCJwaWNFbGVtZW50IiwiYWxlcnRMb2FkaW5nIiwiYXBpIiwiYWRkTmV3Q2FyZCIsImFkZEl0ZW0iLCJjcmVhdGVDYXJkIiwiY2F0Y2giLCJlcnIiLCJmaW5hbGx5IiwicG9wdXBXaXRoSW1hZ2UiLCJwb3B1cEVkaXRQcm9maWxlIiwiaW5mbyIsInNldFVzZXJJbmZvQXBpIiwiaW5wdXRWYWx1ZXMiLCJzZXRVc2VySW5mbyIsInBvcHVwRWRpdEF2YXRhciIsImNoYW5nZUF2YXRhciIsImF1dGhvcml6YXRpb24iLCJjYXJkSXRlbSIsImNhcmQiLCJvcGVuTW9kYWxDYXJkIiwib3BlbiIsImRlbGV0ZUNhcmQiLCJnZXRJZCIsImdldFVzZXJJbmZvQXBpIiwiZ2V0SW5pdGlhbENhcmRzIiwicmVuZGVySXRlbXMiLCJnZXRVc2VySW5mbyIsInByb2ZpbGVGb3JtVmFsaWRhdGlvbiIsImFkZEltYWdlRm9ybVZhbGlkYXRpb24iLCJlZGl0QXZhdGFyRm9yblZhbGlkYXRpb24iLCJlbmFibGVWYWxpZGF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==